#include <iostream>
#include <thread>
#include <chrono>

// разделять ресурсы
// и защищать их друг от друга и общий ресурс!
// и синхронизировать в случае общего доступа к чему-л.
// - mutex


// вот мы хотим многими потоками изменять какие-то данные
// нужно их синхронизировать
// мьютекс как бы говорит о том, что ресурс занят


// например в связном списке второй поток может обратиться к ресурсу
// тогда когда первый ещё не закончил удаление (нарушение связи в списке)



#include <mutex>

std::mutex mtx;

void printR(char ch) {

	// std::lock_guard<std::mutex> guard(mtx); В ДЕСТРУКУТОРЕ ДЕЛАЕТ АНЛОК

	mtx.lock();
	for (int i = 0; i < 5; ++i) {
		for (int i = 0; i < 10; ++i) {
			std::cout << ch;
			std::this_thread::sleep_for(std::chrono::milliseconds(20));
		}
		std::cout << std::endl;
	}
	std::cout << std::endl;
	mtx.unlock();
}



int main() {

	std::thread t1(printR, '*');
	std::thread t2(printR, '#');

	t1.join();
	t2.join();

	//*##*#**##*#*#*#*#*#*
	//#
	//*#*#*#*#*#*#*#*#*#*
	//#
	//*#*#*#*#*#*#*#*#*#*
	//#
	//*#*#*#*#*#*#*#*#*#*
	//#
	//*#*#*#*#*#*#*#*#*#*
	// нам надо защитить
	// сделали мьютекс.локс и анлок в принте

	// => синхронизация

	// но мьютекс делает время работы в два раза больше

	// мьютекс по сути показывает транзакцию

	return 0;
}